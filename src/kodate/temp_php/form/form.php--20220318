<?php
//<meta charset="utf-8">

session_start();

//差分PHP読み込み
require $kaisou."temp_php/form/parts.php";

//[0]が空白の時はkeyと同じ
foreach($form_arr as $key => $val){
	switch($val[0]){
		case '':
		case '*':
		$form_arr[$key][0]=$key.$form_arr[$key][0];
		break;
	}
}

//◆追加JAVAスクリプト
$temp_java.='<script src="https://ajaxzip3.github.io/ajaxzip3.js" charset="UTF-8"></script>
<script src="'.$kaisou.'js/jquery.validationEngine.js" charset="UTF-8"></script>
<script src="'.$kaisou.'js/jquery.validationEngine-ja.js" charset="UTF-8"></script>
<script src="'.$kaisou.'js/form.js" charset="UTF-8"></script>'.chr(10);

//◆リファラチェック
/*
$referer_check=false;
if(isset($_SERVER['HTTP_REFERER'])){
//もしリファラがある場合
	$parse_referer = parse_url($_SERVER['HTTP_REFERER']);
	if(strcmp ($parse_referer['host'],$_SERVER['HTTP_HOST'])!==0){
	//リファラとHTTP_HOSTを比較して異なった場合はアウト
		$referer_check=true;
	}
}
*/
//else{$referer_check=false;}//リファラの無い直リンク

//◆BANチェック
/*
if(!$referer_check){
	$ban_check=SEND_BAN(array
	('emp_name'=>array()
	,'ban_name'=>array()
	,'ban_word'=>array()
	));
}
*/

//◆メール処理分岐

//空の$_REQUEST初期化（PHP7.0対応）
if(empty($_REQUEST['sm_send'])){$_REQUEST['sm_send']='';}
if(empty($_REQUEST['sm_direct'])){$_REQUEST['sm_direct']='';}
if(empty($_REQUEST['sm_back'])){$_REQUEST['sm_back']='';}
if(empty($_REQUEST['sm_conf'])){$_REQUEST['sm_conf']='';}
switch(true){
	/*
	case ($referer_check):
	//リファラチェックに引っかかる
	$step=5;
	break;
	case (FUNC_TOKEN('check')&&$_REQUEST['submit_click']):
	//トークンチェックに引っかかる
	$step=7;
	break;
	case ($ban_check&&$_REQUEST['submit_click']):
	//禁止チェックに引っかかる
	$step=6;
	break;
	*/
	case ($get_arr['send']=='complete'):
	//送信完了
	$_SESSION['correction']='';
	$step=4;
	break;
	case ($_REQUEST['sm_send']!=''):
	case ($_REQUEST['sm_direct']!=''):
	//送信・返信処理
	
	$_SESSION=$_REQUEST;
	
	//差分PHP読み込み
	require $kaisou."temp_php/form/send.php";
	
	mb_language("Japanese");
	mb_internal_encoding("UTF-8");
	
	//▼基本内容セット	
	$sendtext_arr['基本内容']='';
	foreach($form_arr as $key => $val){
		$sendtext_arr['基本内容'].=SEND_WORD($key,$val);
	}
	$sendtext_arr['基本内容'].=chr(10).'------------------------------------------';
	
	//▼送信内容セット
$sendtext_arr['送信内容']='━━━━━━━━━━━━━━━━━━━━━
ホームページよりお問い合わせがありました。
━━━━━━━━━━━━━━━━━━━━━

【お問い合わせ日時】
'.date( "Y/m/d H:i:s", time() ).'
'.$sendtext_arr['基本内容'];

	//▼返信内容セット
	if(empty($sendtext_arr['返信ヘッダ文'])){$sendtext_arr['返信ヘッダ文']='';}
	if($sendtext_arr['返信ヘッダ文']==''){
		$sendtext_arr['返信ヘッダ文']='この度は、'.$comp_data['HP名'].'のお問い合わせをいただき誠にありがとうございます。
本メールは、お客さまのお問い合わせの受付が、以下の内容で完了しましたことをお知らせするものです。';
	}

	$sendtext_arr['返信内容']='━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
'.$_REQUEST[$form_arr['名前漢字']['姓']].' '.$_REQUEST[$form_arr['名前漢字']['名']].'様
'.$sendtext_arr['返信ヘッダ文'].'
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
'.$sendtext_arr['基本内容'].chr(10)
.(($str=$sendtext_arr['返信下追加文'])!=''?chr(10).$str.chr(10):'')
.'※このメールは'.$comp_data['HP名'].'より自動的に配信されています。ご返信いただいてもお答えできませんのでご了承ください。';

		//文字コード変換
		$sendtext_arr['送信内容'] = mb_convert_encoding($sendtext_arr['送信内容'],"JIS","utf8");
		$sendtext_arr['返信内容'] = mb_convert_encoding($sendtext_arr['返信内容'],"JIS","utf8");
		
		//添付ファイルがあれば添付ファイルをセット
		$add_h='';
		/*		
		if(!empty($_REQUEST['fileupload'])){
			$add_h = "Content-Type: multipart/mixed;boundary=\"__BOUNDARY__\"\n";
			$add_b=$add="--__BOUNDARY__\n";
			$add_b.="Content-Type: text/plain; charset=\"ISO-2022-JP\"\n\n";
			$data=array();
			$data['dir']=$kaisou.'images/temporary/';
			foreach($_REQUEST['fileupload'] as $k => $v){
				$data['url']=$data['dir'].$v;
				$add.= "Content-Type: application/octet-stream; name=\"{$_REQUEST['filename'][$k]}\"\n";
				$add.= "Content-Disposition: attachment; filename=\"{$_REQUEST['filename'][$k]}\"\n";
				$add.= "Content-Transfer-Encoding: base64\n\n";				
				$add.= chunk_split(base64_encode(file_get_contents($data['url'])))."\n";
				$add.= "--__BOUNDARY__\n";
			}
			$send_naiyou=$add_b.$send_naiyou.chr(10).$add;
			$res_naiyou=$add_b.$res_naiyou.chr(10).$add;
		}
		*/
		
		//送信先
		$sendtext_arr['送信mail']=$_REQUEST['mail'];
		$from_mail = $_REQUEST['mail'];
		$sendtext_arr['受信mail']=$comp_data['MAIL'];
		$to_mail=$comp_data['MAIL'];
		if($comp_data['MAIL']=='mirror'){
			$sendtext_arr['受信mail']=array($sendtext_arr['送信mail']);
		}
		

		// *+*+*+*+*+*+* SATORI関連の処理実行 *+*+*+*+*+*+* 2020.7.31追加
		require $kaisou."temp_php/form/satori.php";

		//メール送信
		$sender=(!empty($comp_data['MAIL-sender']))?$comp_data['MAIL-sender']:$sendtext_arr['送信mail'];
		foreach($sendtext_arr['受信mail'] as $v){			
			mb_send_mail($v,$sendtext_arr['送信タイトル'],$sendtext_arr['送信内容'],$add_h.'from: '.$sender,'-f'.$sender);
		}
				
		//メール返信
		switch(true){
			case (!empty($sendtext_arr['返信mail']))://別途返信者が設定されているならそちらを最優先
			break;
			case (!empty($comp_data['MAIL-noreply'])):
			$sendtext_arr['返信mail']=$comp_data['MAIL-noreply'];//デフォルトのnoreplyが設定されているならそれを適用
			break;
			default:
			$sendtext_arr['返信mail']=$sendtext_arr['受信mail'][0];//返信者の指定がなければ受信者側の代表のmailになる
		}
		mb_send_mail($sendtext_arr['送信mail'],$sendtext_arr['返信タイトル'],$sendtext_arr['返信内容'],$add_h.'from: '.$sendtext_arr['返信mail'],'-f'.$sendtext_arr['返信mail']);

		//ログに書き込む
		/*
		if(!empty($form_arr['xxx'])){
			require $kaisou."temp_php/form-logwrite.php";
		}
		*/
		
		//サンクスページに飛ぶ
		//if(empty($thanks_page)){$thanks_page=$_SERVER["REQUEST_URI"].'?send=complete';}
		if(empty($thanks_page)){$thanks_page=$_SERVER["SCRIPT_NAME"].'?send=complete';}
		//header("Location: ".$thanks_page); 2020.10.7 SATORI対応
		header("Location: ".$thanks_page.$curl_res);
    exit();
		
	break;
	case ($_REQUEST['sm_back']!=''):
	//戻るボタン
	$_SESSION=$_REQUEST;
	$mark=(strpos($_REQUEST['page_back'],'?')===false)?'?':'&';
	header("Location: ".$_REQUEST['page_back'].$mark.'input=correction');
  exit();
	break;
	case ($_REQUEST['sm_conf']!=''):
	//確認
	$step=3;
	break;
	case ($get_arr['input']!=''):
	//訂正
	$_REQUEST=$_SESSION;
	$step=2;
	break;
	default:
	//入力
	$step=1;
}
?>